"""
main3.py
–í–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é gemma3 —á–µ—Ä–µ–∑ Ollama.

- Endpoint: http://localhost:11434/v1/chat/completions
- –ú–æ–¥–µ–ª—å: "gemma3:latest"
- API-–∫–ª—é—á –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
- RSS: https://lenta.ru/rss/news
- –õ–æ–≥–∏–∫–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî –∫–∞–∫ –≤ main.py (OpenAI).
- –û—Ç–ª–∏—á–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è requests –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Ollama API, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è OPENAI_API_KEY.
- –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞: python main3.py
"""

import os
from dotenv import load_dotenv
import feedparser
import requests
import telegram

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
RSS_URL = "https://lenta.ru/rss/news"
OLLAMA_URL = "http://localhost:11434/v1/chat/completions"
# OLLAMA_MODEL = "gemma3:latest"
OLLAMA_MODEL = "phi3:mini"

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
if not TELEGRAM_CHAT_ID:
    raise ValueError("TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")

def ollama_chat(messages, temperature=0.2):
    """
    messages: [{"role": "system"/"user"/"assistant", "content": "..."}]
    """
    payload = {
        "model": OLLAMA_MODEL,
        "messages": messages,
        "temperature": temperature,
        "stream": False
    }
    response = requests.post(OLLAMA_URL, json=payload)
    try:
        response.raise_for_status()
    except Exception as e:
        print("Ollama –æ—Ç–≤–µ—Ç:", response.text)  # –ü–æ–∫–∞–∂–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
        raise
    data = response.json()
    return data["choices"][0]["message"]["content"]

def get_top_news():
    feed = feedparser.parse(RSS_URL)
    news = []
    for entry in feed.entries[:3]:
        news.append({
            "title": entry.get("title", ""),
            "summary": entry.get("summary", entry.get("description", "")),
            "link": entry.get("link", "")
        })
    return news

def summarize_news(news_list):
    summaries = []
    for news in news_list:
        prompt = (
            f"–ù–æ–≤–æ—Å—Ç—å:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {news['summary']}\n\n"
            "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –¥–µ–ª–æ–≤–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º –∏ —è—Å–Ω—ã–º —è–∑—ã–∫–æ–º –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ."
        )
        messages = [
            {"role": "system", "content": "–¢—ã –¥–µ–ª–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∫—Ä–∞—Ç–∫–æ —Ä–µ–∑—é–º–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
            {"role": "user", "content": prompt}
        ]
        summary = ollama_chat(messages)
        summaries.append(summary.strip())
    return summaries

def build_report(summaries):
    report = "üì∞ –ú–∏–Ω–∏-–æ—Ç—á—ë—Ç –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –Ω–æ–≤–æ—Å—Ç—è–º:\n"
    for idx, summary in enumerate(summaries, 1):
        report += f"{idx}. {summary}\n"
    return report.strip()

def send_telegram_message(token, chat_id, message):
    print(">>> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –≤ Telegram...")
    print(f"DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n{message}\n")
    try:
        bot = telegram.Bot(token=token)
        if isinstance(chat_id, str) and chat_id.isdigit():
            chat_id = int(chat_id)
        if not message or not message.strip():
            print("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return
        chunks = [message[i:i+4000] for i in range(0, len(message), 4000)]
        for chunk in chunks:
            bot.send_message(chat_id=chat_id, text=chunk)
        print(">>> –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞–µ–º Ollama-–º–∞–≥–∏—á–µ—Å–∫–∏–π LLM-–ø–∞–π–ø–ª–∞–π–Ω —Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º!")
    news = get_top_news()
    print("–¢–æ–ø-3 –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã.")
    summaries = summarize_news(news)
    print("–°–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.")
    report = build_report(summaries)
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞:\n", report)
    send_telegram_message(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, report)
    print("–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")

# –û—Ç–ª–∏—á–∏—è main3.py:
# - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Ollama API (requests), –∞ –Ω–µ openai/crewai.
# - –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è OPENAI_API_KEY.
# - –ú–æ–¥–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —è–≤–Ω–æ: "gemma3:latest".
# - –ù–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏, vision –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OpenAI.
# - –í—Å—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ main.py.
#
# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞:
# python main3.py
