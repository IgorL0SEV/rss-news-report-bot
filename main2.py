import os
import feedparser
import requests
from dotenv import load_dotenv
import telegram
import asyncio
from telegram import Bot

load_dotenv()

PROXYAPI_KEY = os.getenv("PROXYAPI_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
RSS_URL = "https://habr.com/ru/rss/all/all/?fl=ru"
# RSS_URL = "http://feeds.bbci.co.uk/news/rss.xml"

def parse_rss():
    print(">>> –ü–∞—Ä—Å–∏–º RSS-–ª–µ–Ω—Ç—É...")
    feed = feedparser.parse(RSS_URL)
    news = []
    for entry in feed.entries[:3]:
        news.append({
            'title': entry.title,
            'link': entry.link,
            'summary': entry.summary if 'summary' in entry else entry.get('description', '')
        })
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π.")
    return news

def summarize_news(news_list):
    print(">>> –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞—Ç—ã —á–µ—Ä–µ–∑ ProxyAPI...")
    summaries = []
    for news in news_list:
        prompt = (
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–¥–µ–ª–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. "
            "–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {news['summary']}\n\n"
            "–†–µ–∑—é–º–µ:"
        )
        payload = {
            "model": "gpt-4.1-nano-2025-04-14",
            "messages": [{"role": "user", "content": prompt}],
            "stream": False,
            "temperature": 0.5,
            "max_tokens": 150
        }
        try:
            response = requests.post(
                "https://api.proxyapi.ru/openai/v1/chat/completions",
                headers={"Authorization": f"Bearer {PROXYAPI_KEY}"},
                json=payload,
                timeout=30
            )
            res = response.json()
            summary = res["choices"][0]["message"]["content"].strip()
            summaries.append(summary)
            print(f"- [{news['title'][:40]}...] OK")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary: {e}")
            summaries.append("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary.")
    return summaries

def build_report(summaries):
    print(">>> –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç...")
    report = "üì∞ –ú–∏–Ω–∏-–æ—Ç—á—ë—Ç –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –Ω–æ–≤–æ—Å—Ç—è–º:\n\n"
    for idx, summary in enumerate(summaries, 1):
        report += f"{idx}. {summary}\n\n"
    print(">>> –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤.")
    return report

async def send_telegram_message(token, chat_id, message):
    print(">>> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –≤ Telegram —á–µ—Ä–µ–∑ PTB 20+...")
    bot = Bot(token=token)
    chunks = [message[i:i+4000] for i in range(0, len(message), 4000)]
    for chunk in chunks:
        await bot.send_message(chat_id=chat_id, text=chunk)
    print(">>> –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")



if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —á–µ—Ä–µ–∑ ProxyAPI!")
    news_list = parse_rss()
    summaries = summarize_news(news_list)
    report = build_report(summaries)
    print(report)
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤!
    asyncio.run(send_telegram_message(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, report))
    print("–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
